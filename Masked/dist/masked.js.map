{
  "version": 3,
  "sources": ["../masked.js"],
  "sourcesContent": ["console.log(`masked.js loaded`);\r\n\r\nvar storage_data = {};\r\n\r\nasync function init() {\r\n    return browser.storage.local.get().then((resp) => {\r\n        storage_data = resp.masked_data;\r\n        console.log(\"Masked storage loaded\");\r\n    }).catch((err) => {\r\n        console.error(\"Error getting storage data: \", err);\r\n    });\r\n}\r\n\r\ndo_masks();\r\n\r\nasync function do_masks() {\r\n    await init();\r\n    let secrets_t = storage_data.lists.secrets;\r\n    let regexes_t = storage_data.lists.regexes;\r\n    let search_elements = [];\r\n    let search_regexes = [];\r\n    let found = [];\r\n    let secrets = [];\r\n\r\n    if (storage_data.options.enable_secrets === true) {\r\n        if (storage_data.options.regex_in_secrets) {\r\n            console.log(\"regex in secrets enabled, combining secrets and regexes\");\r\n            secrets = [...secrets_t, ...regexes_t];\r\n        }\r\n\r\n        let out = '';\r\n        storage_data.lists.secrets.forEach((s) => {\r\n            out +='*[name*=\"' + s + '\"],*[id*=\"' + s + '\"]';\r\n        });\r\n        console.log(out);\r\n        \r\n\r\n        search_regexes = secrets_t.map(secret => {\r\n            if (secret.startsWith(\"/\") && secret.endsWith(\"/\")) {\r\n                return new RegExp(secret.substring(1, secret.length - 1));\r\n            } else {\r\n                return new RegExp(secret);\r\n            }\r\n        });\r\n\r\n        search_regexes.forEach((re) => {\r\n            let check_emails = storage_data.options.mask_emails;\r\n            search_elements = document.querySelectorAll('*[name*=\"log\"],*[id*=\"log\"]');\r\n            \r\n            search_elements.forEach((e) => {\r\n                if (re.test(e.id) || re.test(e.name)) {\r\n                    if (check_emails == false && (e.id.match(/email/i) || e.name.match(/email/i))) {\r\n                        return;\r\n                    }\r\n                    found.push(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    if (storage_data.options.enable_regex) {\r\n        await maskRegexMatches();\r\n    }\r\n    \r\n    await browser.runtime.sendMessage({\r\n        \"masked_cmd\": \"pop_window\",\r\n        \"sender\": \"masked.js\",\r\n        \"value\": JSON.stringify(found)\r\n    });\r\n\r\n    found.forEach((f) => {\r\n        if (!document.getElementById(f.id + '-masked')) {\r\n            let holder;\r\n\r\n            switch (f.tagName.toLowerCase()) {\r\n                case 'input':\r\n                    if (f.type != 'password' && f.type != 'hidden') {\r\n                        f.type = 'password';\r\n                        holder = getHolderElement(f.value, f.type);\r\n                    }\r\n                    break;\r\n                case 'div':\r\n                case 'span':\r\n                    holder = getHolderElement(f.textContent, f);\r\n                    f.textContent = \"*\".repeat(f.textContent.length);\r\n                    break;\r\n                default:\r\n                    console.log(f);\r\n                    holder.value = f.value;\r\n                    f.value = \"*\".repeat(f.value.length);\r\n                    break;\r\n            }\r\n            f.before(holder);\r\n        }\r\n    });\r\n\r\n    await browser.runtime.sendMessage({\r\n        \"masked_cmd\": \"update_badge\",\r\n        \"sender\": \"masked.js\",\r\n        \"value\": found.length\r\n    });\r\n}\r\nasync function maskRegexMatches() {\r\n    let [depth, maxDepth] = [1, storage_data.options.max_depth];\r\n    let regexes = storage_data.lists.regexes;\r\n    let secrets = storage_data.lists.secrets;\r\n    let textNodes = [];\r\n    \r\n    if (storage_data.options.secrets_in_regex) {\r\n        regexes = [...secrets, ...regexes];\r\n    }\r\n   \r\n    function getTextNodes(node) {\r\n        if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== \"\") {\r\n            textNodes.push(node);\r\n        } else {\r\n            if (depth <= maxDepth) {\r\n                console.log(`depth: ${depth}`);\r\n                depth++;\r\n                node.childNodes.forEach(getTextNodes);\r\n                depth--;\r\n            } else {\r\n                console.log(`Maximum node-depth of ${maxDepth} reached, skipping`);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n   \r\n    getTextNodes(document.body);\r\n    console.log(`${textNodes.length} nodes found`);\r\n    \r\n    textNodes.forEach((textNode) => {\r\n        regexes.forEach((regex) => {\r\n            let rgx = new RegExp(regex.trim(), 'igm');\r\n\r\n            if (rgx.test(textNode.nodeValue)) {\r\n                let originalText = textNode.nodeValue;\r\n                let maskedText = originalText.replace(rgx, (match) => \"*\".repeat(match.length));\r\n                let holderElement = getHolderElement(originalText, textNode, 1);\r\n                //let cloneElement = document.createElement(textNode.type);\r\n\r\n                //cloneElement.textContent = maskedText;\r\n\r\n                //if (typeof textNode.parentNode !== 'undefined' && textNode.parentNode !== null) {\r\n                    //textNode.parentNode.replaceChild(span, textNode);\r\n                    //span.parentNode.insertBefore(holderElement, span.nextSibling);\r\n                    textNode.nodeValue = maskedText;\r\n                    textNode.before(holderElement);\r\n                //} else {\r\n                    //textNode.replaceWith(span);\r\n           //     }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction getHolderElement(originalText, attachedElement, type) {\r\n    let holder = document.createElement(\"a\");\r\n    \r\n    holder.innerHTML = type?'\uD83E\uDDD0':'\uD83E\uDD78';\r\n    holder.style.position = 'absolute';\r\n    holder.style.zIndex = '300';\r\n    holder.style.left = \"100%\";\r\n    holder.style.marginLeft = '5px';\r\n    holder.style.cursor = 'copy';\r\n\r\n    holder.setAttribute('data-original', originalText);\r\n    holder.addEventListener(\"click\", (attachedElement) => {\r\n        navigator.clipboard.writeText(attachedElement.target.getAttribute('data-original'));\r\n    });\r\n\r\n    return holder;\r\n}\r\n\r\nfunction maskElement(element) {\r\n    let holder;\r\n    switch (element.tagName.toLowerCase()) {\r\n        case 'input':\r\n            if (element.type != 'password' && element.type != 'hidden') {\r\n                element.type = 'password';\r\n                holder = getHolderElement(element.value, element);\r\n            }\r\n            break;\r\n        case 'div':\r\n        case 'span':\r\n            holder = getHolderElement(element.textContent, element);\r\n            element.textContent = \"*\".repeat(element.textContent.length);\r\n            break;\r\n        default:\r\n            console.log(element);\r\n            holder.value = element.value;\r\n            element.value = \"*\".repeat(element.value.length);\r\n            break;\r\n    }\r\n    element.before(holder);\r\n}"],
  "mappings": "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",
  "names": ["attachedElement"]
}
